aa <- t(a)
aa2 <- t(a2)
if (dim(aa)[1] != 0) {
fg_matrix=t(apply(aa, 1, custom, C, P, clusters))
fg_matrix <- subset(fg_matrix, apply(fg_matrix, 1, function(x) identical(is.na(x),
rep(FALSE, 3))))
fg_matrix2=t(apply(aa2, 1, custom, C, P2, clusters))
fg_matrix2 <- subset(fg_matrix2, apply(fg_matrix2, 1, function(x) identical(is.na(x),
rep(FALSE, 3))))
contatore2[u] <- nrow(unique.matrix(fg_matrix2, incomparables = FALSE, 1))
contatore[u] <- nrow(unique.matrix(fg_matrix, incomparables = FALSE, 1))
}
}
}
contatore2
p_star
MUSS=function(C, clusters, prec_par=10, tol=0) {
if (missing(prec_par)) {
prec_par <- min(10, min(table(clusters)))
}else {
prec_par <- min(prec_par, min(table(clusters)))
}
nCl=length(unique(clusters))
if(nCl>=5){stop("The maximum number of clusters allowed is four!")}
coppie <- which(C <= tol, arr.ind = TRUE)
ordine <- sort(table(coppie), decreasing = TRUE)
lista_ord <- as.double(names(ordine))
subgroups <- matrix(NA, nCl, prec_par)
for (g in 1:length(unique(clusters))) {
if (sum(clusters==g)==1) {
warning("Singleton clusters given as input!")
geterrmessage()
}
subgroups[g, ] <- lista_ord[clusters[lista_ord] == g][1:prec_par]
if (all(is.na(subgroups[g, ])) == TRUE) {
stop("The set of candidate pivots is empty, try increasing prec_par!")
}
}
P <- c()
insieme_card_p <- c()
p_star <- as.vector(t(subgroups))
p_star <- p_star[is.na(p_star)==FALSE]
contatore <- rep(0, length(p_star))
custom <- function(m, Coa, Pset, clust) {
i <- 0
rip_matr <- matrix(NA, 1, 3)
lista_rip <- list()
for (p in 1:length(Pset)) {
if (identical(Coa[c(m, Pset[p]), c(m, Pset[p])], diag(3)) && clust[Pset[p]] != clust[m]) {
i <- i + 1
lista_rip[[i]] <- sort(c(m, Pset[p]))
}
}
if (i != 0) {
rip_matr <- matrix(NA, i, 3)
for (j in 1:i) {
rip_matr[j, ] <- lista_rip[[j]]
}
}
return(rip_matr = rip_matr)
}
#  clusters[p_star]
if (nCl == 2) {
for (u in 1 : length(p_star)) {
P <- coppie[, 2][coppie[, 1] == p_star[u] & clusters[coppie[, 2]] != clusters[p_star[u]]]
card_p <- length(P)
insieme_card_p[u] <- card_p
if (insieme_card_p[u] > 1) {
for (p in 1:(insieme_card_p[u] - 1)) {
if (C[P[p], p_star[u]] <= tol && clusters[P[p]] != clusters[p_star[u]]) {
contatore[u] = contatore[u] + 1
}
}
}
}
}else if (nCl == 3) {
for (u in 1: length(p_star)){
P <- coppie[, 2][coppie[, 1] == p_star[u] & clusters[coppie[, 2]] != clusters[p_star[u]]]
card_p <- length(P)
insieme_card_p[u] <- card_p
if (insieme_card_p[u] == 2) {
if (C[P[1], P[2]] <= tol && clusters[P[1]] != clusters[P[2]] &&
clusters[p_star[u]] != clusters[P[2]]) {
contatore[u] = contatore[u] + 1
}
}else if (insieme_card_p[u] > 2) {
for (p in 1:(insieme_card_p[u] - 1)) {
for (o in (p + 1):insieme_card_p[u]) {
if (C[P[p], P[o]] <= tol && clusters[P[p]] !=  clusters[P[o]] && clusters[p_star[u]] !=  clusters[P[o]]) {
contatore[u] = contatore[u] + 1
}
}
}
}
}
} else if (nCl == 4){
for (u in 1:length(p_star)) {
P <- coppie[, 2][coppie[, 1] == p_star[u] & clusters[coppie[, 2]] != clusters[p_star[u]]]
insieme_card_p[u] <- length(P)
P2=p_star[which(clusters[p_star]!=clusters[p_star[u]])][C[p_star[u],
p_star[which(clusters[p_star]!=clusters[p_star[u]])]]==0]
if (insieme_card_p[u] > 2) {
a <- combn(P, 2)[, apply(combn(P, 2), 2, function(x)
sum((identical(C[x, x], diag(2))) & (length(unique(clusters[x])) == 2))) == 1]
a2 <- combn(P2, 2)[, apply(combn(P2, 2), 2, function(x)
sum((identical(C[x, x], diag(2))) & (length(unique(clusters[x])) == 2))) == 1]
aa <- t(a)
aa2 <- t(a2)
if (dim(aa)[1] != 0) {
fg_matrix=t(apply(aa, 1, custom, C, P, clusters))
fg_matrix <- subset(fg_matrix, apply(fg_matrix, 1, function(x) identical(is.na(x),
rep(FALSE, 3))))
fg_matrix2=t(apply(aa2, 1, custom, C, P2, clusters))
fg_matrix2 <- subset(fg_matrix2, apply(fg_matrix2, 1, function(x) identical(is.na(x),
rep(FALSE, 3))))
contatore2[u] <- nrow(unique.matrix(fg_matrix2, incomparables = FALSE, 1))
contatore[u] <- nrow(unique.matrix(fg_matrix, incomparables = FALSE, 1))
}
}
}
}
if (sum(contatore)==0) {warning("The algorithm did not identify optimal pivots!")}
tabella <- cbind(p_star, cl=clusters[p_star], insieme_card_p, contatore, contatore2)
maxima <- rep(NA, length(unique(clusters)))
for (g in 1:nCl) {
s=subset(tabella[, 4], tabella[, 2] == g)
maxima[g] <- subset(tabella, tabella[, 2] == g)[which.max(s), 1]
}
return(list(pivots = maxima, prec_par = prec_par,
tabella =tabella))
}
MUSS(C=C, clusters = clusters)
install.packages("LearnBayes")
install.packages("animation")
#true mean
theta_sample <- 2
#likelihood variance
sigma2 <- 2
#sample size
n <- 10
#prior mean
mu <- 1
#prior variance
tau2 <- 2
#generate some data
set.seed(123)
y <- rnorm(n,theta_sample, sqrt(sigma2))
#posterior mean
mu_star <- ((1/tau2)*mu+(n/sigma2)*mean(y))/( (1/tau2)+(n/sigma2))
#posterior standard deviation
sd_star <- sqrt(1/( (1/tau2)+(n/sigma2)))
curve(dnorm(x, theta_sample, sqrt(sigma2/n)),xlim=c(-4,15), lty=2, lwd=1, col="black", ylim=c(0,1.4),
ylab="density", xlab=expression(theta))
curve(dnorm(x, mu, sqrt(tau2) ), xlim=c(-4,15), col="red", lty=1,lwd=2,  add =T)
curve(dnorm(x, mu_star, sd_star),
xlab=expression(theta), ylab="", col="blue", lwd=2, add=T)
legend(8.5, 0.7, c("Prior", "Likelihood", "Posterior"),
c("red", "black", "blue", "grey" ), lty=c(1,2,1),lwd=c(1,1,2), cex=1)
2*2.5^2
2.5^2
10^2
library(pivmet)
help(piv_MCMC)
data(fish)
y <- fish[,1]
k <- 5
nMC <- 5000
res <- piv_MCMC(y = y, k = k, nMC = nMC)
# changing priors
res2   <- piv_MCMC(y = y,
priors = list(kind = "condconjugate",
parameter = "priorsRaftery",
hierarchical = "tau"),  k =k, nMC = nMC)
10e-17/10e-33
10^16
library(mgcv)
data(trees)
help(trees)
help(gamSim)
gamSim(eg=1, n=400, dist="normal", scale =2)
gamSim(eg=2, n=400, dist="normal", scale =2)
dat <- gamSim(1,n=200,dist="poisson",scale=.1)
dat
dat <- gamSim(1,n=200,dist="poisson",scale=.1)
b2<-gam(y~s(x0)+s(x1)+s(x2)+
s(x3),family=poisson,data=dat)
b2
summary(b2)
plot(b2,pages=1)
b3 <- gam(y~+s(x1)+s(x2),family=poisson,data=dat)
set.seed(123)
dat <- gamSim(1,n=200,dist="poisson",scale=.1)
b2<-gam(y~s(x0)+s(x1)+s(x2)+
s(x3),family=poisson,data=dat)
summary(b2)
plot(b2,pages=1)
b3 <- gam(y~+s(x1)+s(x2),family=poisson,data=dat)
plot(b3, pages=1)
AIC(b2, b3)
b3 <- gam(y~+x0+s(x1)+s(x2),family=poisson,data=dat)
summary(b3)
AIC(b2, b3)
b2_glm <-glm(y~x0+x1+x2+
x3,family=poisson,data=dat)
AIC(b2, b2_glm)
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
library(pivmet)
piv_sim(20, 3, c(-3,0,3))
y<-piv_sim(20, 3, c(-3,0,3))
hist(y$y)
setwd("~/")
data <- list(y=y$y, N=20, k=3)
library(rstan)
fit <- stan(file="univ_mixture.stan",
data=data)
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
data <- list(y=y$y, N=20, k=3)
fit <- stan(file="univ_mixture.stan",
data=data)
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
data <- list(y=y$y, N=20, k=3)
fit <- stan(file="univ_mixture.stan",
data=data)
sims<-extract(fit)
sims$z
dim(sims$z)
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
data <- list(y=y$y, N=20, k=3)
fit <- stan(file="univ_mixture.stan",
data=data)
sims<-extract(fit)
sims$z
sims$z
dim(sims$z)
y$true.group
apply(sims$z,2,mean)
apply(sims$z,2,median)
dim(sims$z)
hist(sims$z[,1])
table(sims$z[,1])
rstan:::rstudio_stanc("univ_mixture.stan")
hist(sims$z[,2])
hist(sims$theta[,1])
dim(sims$theta)
sims$theta[1,]
sum(sims$theta[1,])
sum(sims$theta[2,])
dim(sims$theta)
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
data <- list(y=y$y, N=20, k=3)
fit <- stan(file="univ_mixture.stan",
data=data)
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
data <- list(y=y$y, N=20, k=3)
fit <- stan(file="univ_mixture.stan",
data=data)
sims<-extract(fit)
sims$theta
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
data <- list(y=y$y, N=20, k=3)
fit <- stan(file="univ_mixture.stan",
data=data)
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
data <- list(y=y$y, N=20, k=3)
fit <- stan(file="univ_mixture.stan",
data=data)
rstan:::rstudio_stanc("univ_mixture.stan")
fit <- stan(file="univ_mixture.stan",
data=data)
sample(1:17,2, replace = FALSE)
BLOCCO_A[sample(1:17,2, replace = FALSE)]
Blocco_A<-c("DAAG 3.12", "DAAG 4.5", "DAAG 4.11",
"DAAG 4.12", "DAAG 4.14", "DAAG 4.17",
"DAAG 4.19", "DAAG 21", "CS 1.3", "CS 1.4",
"CS 1.5", "CS 1.7", "CS 2.4", "CS 2.6",
"CS 3.1", "CS 3.2", "CS 3.6")
BLOCCO_B <- c("CS 4.1", "CS 4.3", "CS 4.4", "CS 4.5",
"CS 4.6", "ALB 2.2", "ALB 2.5",
"ALB 3.1", "ALB 3.2", "ALB 3.3")
Blocco_A<-c("DAAG 3.12", "DAAG 4.5", "DAAG 4.11",
"DAAG 4.12", "DAAG 4.14", "DAAG 4.17",
"DAAG 4.19", "DAAG 4.21", "CS 1.3", "CS 1.4",
"CS 1.5", "CS 1.7", "CS 2.4", "CS 2.6",
"CS 3.1", "CS 3.2", "CS 3.6")
Blocco_B <- c("CS 4.1", "CS 4.3", "CS 4.4", "CS 4.5",
"CS 4.6", "ALB 2.2", "ALB 2.5",
"ALB 3.1", "ALB 3.2", "ALB 3.3")
Blocco_C <- c("DAAG 7.1", "DAAG 7.2", "DAAG 7.3",
"DAAG 7.5", "DAAG 7.7", "DAAG 7.8",
"DAAG 7.13", "DAAG 7.19",
"DAAG 8.1", "DAAG 8.3", "DAAG 8.5",
"DAAG 8.6", "DAAG 11.1", "DAAG 11.4",
"DAAG 11.5", "DAAG 11.9")
N <- 24
lista_es <- matrix(NA, N, 5)
for (n in 1:N){
lista_es[n, 1:2] <- Blocco_A[sample(1:17,2, replace = FALSE)]
lista_es[n,3]  <- Blocco_B[sample(1:5,1)]
lista_es[n,4]  <- Blocco_B[sample(6:10,1)]
lista_es[n,5]  <- Blocco_C[sample(1:16,1)]
}
lista_es
sample(1:17,2, replace = FALSE)
sample(1:17,2, replace = FALSE)
sample(1:17,2, replace = FALSE)
sample(1:17,2, replace = FALSE)
sample(1:17,2, replace = FALSE)
sample(1:17,2, replace = FALSE)
sample(1:17,2, replace = FALSE)
rownames(lista_es)<-studenti
studenti <- c("Milite", "Pigozzi", "Venturini",
"Franzon", "Rodani", "Valjavec", "Slipchuk",
"Lorenzon","Rossi", "Meneghini", "Franco",
"Gonnelli", "Negrao Pinto", "Indri",  "Khadka",
"Cicala", "Scassola", "Sarti",
"Fresco", "Paoletti", "Balasso",
"Fallacara", "Nadimi", "Tossut")
rownames(lista_es)<-studenti
lista_es
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
library(pivmet)
y <- piv_sim(20, 3)$y
y <- piv_sim(20, 3, c(-4,0,4))$y
y
library(pivmet)
y <- piv_sim(20, 3, c(-4,0,4))$y
data <- list(y=y$y, N=20, k=3)
library(pivmet)
y <- piv_sim(20, 3, c(-4,0,4))$y
data <- list(y=y, N=20, k=3)
fit <- stan(file="univ_mixture.stan",
data=data)
library(pivmet)
library(rstan)
y <- piv_sim(20, 3, c(-4,0,4))$y
data <- list(y=y, N=20, k=3)
fit <- stan(file="univ_mixture.stan",
data=data)
dnorm(x,3,2)
dnorm(0,3,2)
log(1/4)
log(1/3)
mu <- c(-4,0,4)
sigma <-c(1,3,4)
theta <- rep(1/3,3)
theta
dnorm(1, mu, sigma)
dnorm(1, mu, sigma)+log(theta)
dnorm(1, mu, sigma)+log(theta)-log(sum(exp(dnorm(1,mu, sigma))))
dnorm(1, mu, sigma)+log(theta)-log(sum(exp(dnorm(1,mu, sigma)))+log(theta))
dnorm(1, mu, sigma)+log(theta)-log(sum(exp(dnorm(1,mu, sigma)))+sum(log(theta)))
dnorm(1, mu, sigma)+log(theta)-log(sum(exp(dnorm(1,mu, sigma))))
dnorm(1, mu, sigma)+log(theta)-log(sum(exp(dnorm(1,mu, sigma))))+log(theta)
dnorm(1, mu, sigma)+log(theta)-log(sum(exp(dnorm(1,mu, sigma))))+sum(log(theta))
dnorm(1, mu, sigma)+log(theta)-log(sum(exp(dnorm(1,mu, sigma))))-sum(log(theta))
dnorm(1, mu, sigma)+log(theta)-log(sum(exp(dnorm(1,mu, sigma))))
log(dnorm(1, mu, sigma))+log(theta)-log(sum(exp(log(dnorm(1,mu, sigma)))))
log(dnorm(1, mu, sigma))+log(theta)-log(sum(exp(log(dnorm(1,mu, sigma)))))-sum(log(dnorm(1,mu,sigma)))
log(dnorm(1, mu, sigma))+log(theta)-log(sum(exp(log(dnorm(1,mu, sigma)))))+sum(log(dnorm(1,mu,sigma)))
log(dnorm(1, mu, sigma))+log(theta)-log(sum(exp(log(dnorm(1,mu, sigma)))))
log(dnorm(1, mu, sigma))+log(theta)
log(dnorm(1, mu, sigma))+log(theta)-log(sum(exp(log(dnorm(1,mu,sigma)))))
log(dnorm(1, mu, sigma))+log(theta)-log(sum(exp(log(dnorm(1,mu,sigma))+log(theta))))
log(dnorm(1, mu, sigma))+log(theta)-log(sum(exp(log(dnorm(1,mu,sigma))+log(theta))))
log(dnorm(1, mu, sigma))+log(theta)-log(sum(exp(log(dnorm(1,mu,sigma))+log(theta))))
log_p<-log(dnorm(1, mu, sigma))+log(theta)-log(sum(exp(log(dnorm(1,mu,sigma))+log(theta))))
log_p
exp(log_p)
sum(exp(log_p))
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
rstan:::rstudio_stanc("univ_mixture.stan")
y <- piv_sim(20, 3, c(-4,0,4))$y
data <- list(y=y, N=20, k=3)
fit <- stan(file="univ_mixture.stan",
data=data)
rstan:::rstudio_stanc("univ_mixture.stan")
y <- piv_sim(20, 3, c(-4,0,4))$y
data <- list(y=y, N=20, k=3)
fit <- stan(file="univ_mixture.stan",
data=data)
y <- piv_sim(20, 3, c(-4,0,4))$y
data <- list(y=y, N=20, k=3)
fit <- stan(file="univ_mixture.stan",
data=data)
sims<-extract(fit)
dim(sims$z)
sims$z
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
dim(sims$z)
help(piv_MCMC)
help("stan")
mix_univ <-"
data {
int<lower=1> k;          // number of mixture components
int<lower=1> N;          // number of data points
real y[N];               // observations
}
parameters {
simplex[k] theta;        // mixing proportions
ordered[k] mu;              // locations of mixture components
vector<lower=0>[k] sigma;   // scales of mixture components
}
transformed parameters{
vector[k] log_theta = log(theta);  // cache log calculation
vector[k] pz[N];
for (n in 1:N){
pz[n]=   normal_lpdf(y[n]|mu, sigma)+
log_theta-
log_sum_exp(normal_lpdf(y[n]|mu, sigma)+
log_theta);
}
}
model {
sigma ~ lognormal(0, 2);
mu ~ normal(0, 10);
for (n in 1:N) {
vector[k] lps = log_theta;
for (j in 1:k){
lps[j] += normal_lpdf(y[n] | mu[j], sigma[j]);
target+=pz[n,j];
}
target += log_sum_exp(lps);
}
}
generated quantities{
int<lower=1, upper=k> z[N];
for (n in 1:N){
z[n] = categorical_rng(exp(pz[n]));
}
}
"
stan(model_name = mix_univ, data=data)
stan(model_code = mix_univ, data=data)
nMC
nMC<-2000
fit_univ <-  stan(model_code = mix_univ,
data=data,
chains =4,
iter =nMC)
sims_univ <- extract(fit_univ)
burn
burn<-1000
mcmc.pars <- array(data = NA, dim = c(nMC-length(1:burn), k, J))
k=3
mcmc.pars <- array(data = NA, dim = c(nMC-length(1:burn), k, J))
J <- 3
mcmc.pars <- array(data = NA, dim = c(nMC-length(1:burn), k, J))
dim(sims_univ$pz)
dim(sims_univ$mu)
(N+k+1)
N<-20
(N+k+1)
dim(sims_univ$mu)
(N+k+1):(N+2*k)
(N+2*k+1):(N+3*k)
(N+1):(N+k)
sims_univ$mu[-(1:burn), ]
exp(sims_univ$pz[-(1:burn), ])
sims_univ$pz
sims_univ$pz[-(1:burn), ]
dim(sims_univ$pz)
mcmc.pars <- array(data = NA, dim = c(nMC-length(1:burn), k, J))
mcmc.pars[ , , 1] <- sims_univ$mu[-(1:burn), ]
sims_univ$mu[-(1:burn), ]
dim(mcmc.pars)
dim(sims_univ)
dim(sims_univ$mu)
nMC=2000
mcmc.pars <- array(data = NA, dim = c(2*nMC-length(1:burn), k, J))
mcmc.pars[ , , 1] <- sims_univ$mu[-(1:burn), ]
mcmc.pars[ , , 2] <- sims_univ$sigma[-(1:burn), ]
mcmc.pars[ , , 3] <- sims_univ$theta[-(1:burn), ]
dim(sims_univ$z)
mu <- mcmc.pars[,,1]
tau <- mcmc.pars[,,2]
prob.st <- mcmc.pars[,,3]
group <-  sims_univ$z[-(1:burn), 1:N] #gruppi
group
rstan:::rstudio_stanc("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Stan - Padova 2019/stan_programs/simple_poisson_regression.stan")
rstan:::rstudio_stanc("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Stan - Padova 2019/stan_programs/simple_poisson_regression.stan")
rstan:::rstudio_stanc("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Stan - Padova 2019/stan_programs/hier_NB_regression_ncp.stan")
setwd("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Stan - Padova 2019/stan_programs")
