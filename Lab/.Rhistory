library(rstan)
library(dplyr)
library(lubridate)
library(ggplot2)
library(bayesplot)
theme_set(bayesplot::theme_default())
# seed for R's pseudo-RNGs, not Stan's
set.seed(1123)
## ----load-data-----------------------------------------------------------
pest_data <- readRDS('data/pest_data.RDS')
str(pest_data)
N_buildings <- length(unique(pest_data$building_id))
N_buildings
## ----data-plots----------------------------------------------------------
ggplot(pest_data, aes(x = complaints)) +
geom_bar()
ggplot(pest_data, aes(x = date, y = complaints, color = live_in_super == TRUE)) +
geom_line(aes(linetype = "Number of complaints")) +
geom_point(color = "black") +
geom_line(aes(y = traps, linetype = "Number of traps"), color = "black", size = 0.25) +
facet_wrap(~building_id, scales = "free", ncol = 2, labeller = label_both) +
scale_x_date(name = "Month", date_labels = "%b") +
scale_y_continuous(name = "", limits = range(pest_data$complaints)) +
scale_linetype_discrete(name = "") +
scale_color_discrete(name = "Live-in super")
setwd("~/GitHub/GLMM-course-2019---Bayesian-Inference-with-Stan/Lab")
setwd("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Bayesian analysis Pavia 2018/pavia-2018-master/pavia-2018-master/stan_programs")
rstan:::rstudio_stanc("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Stan - Padova 2019/Lab/stan_programs/simple_poisson_regression.stan")
rstan:::rstudio_stanc("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Stan - Padova 2019/Lab/stan_programs/simple_poisson_regression.stan")
rstan:::rstudio_stanc("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Stan - Padova 2019/Lab/stan_programs/simple_poisson_regression.stan")
rstan:::rstudio_stanc("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Stan - Padova 2019/Lab/stan_programs/simple_poisson_regression.stan")
rstan:::rstudio_stanc("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Stan - Padova 2019/Lab/stan_programs/simple_poisson_regression.stan")
rstan:::rstudio_stanc("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Stan - Padova 2019/Lab/stan_programs/simple_poisson_regression.stan")
rstan:::rstudio_stanc("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Stan - Padova 2019/Lab/stan_programs/simple_poisson_regression.stan")
setwd("~/GitHub/GLMM-course-2019---Bayesian-Inference-with-Stan/Lab")
setwd("~/GitHub/GLMM-course-2019---Bayesian-Inference-with-Stan/Lab")
## ---- cache=TRUE, results="hide", message=FALSE--------------------------
comp_model_P <- stan_model('stan_programs/simple_poisson_regression.stan')
fit_model_P <- sampling(comp_model_P, data = stan_dat_fake, seed = 123)
## ----stan-data-----------------------------------------------------------
stan_dat_simple <- list(
N = nrow(pest_data),
complaints = pest_data$complaints,
traps = pest_data$traps
)
## ----fit_P_real_data, cache=TRUE-----------------------------------------
fit_P_real_data <- sampling(comp_model_P, data = stan_dat_simple)
str(stan_dat_simple)
setwd("~/GitHub/GLMM-course-2019---Bayesian-Inference-with-Stan/Lab")
## ----fit_P_real_data, cache=TRUE-----------------------------------------
fit_P_real_data <- sampling(comp_model_P, data = stan_dat_simple)
setwd("~/GitHub/GLMM-course-2019---Bayesian-Inference-with-Stan/Lab")
## ----fit_P_real_data, cache=TRUE-----------------------------------------
fit_P_real_data <- sampling(comp_model_P, data = stan_dat_simple)
## ----stan-data-----------------------------------------------------------
stan_dat_simple <- list(
N = nrow(pest_data),
complaints = pest_data$complaints,
traps = pest_data$traps
)
str(stan_dat_simple)
## ----fit_P_real_data, cache=TRUE-----------------------------------------
fit_P_real_data <- sampling(comp_model_P, data = stan_dat_simple)
rstan:::rstudio_stanc("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Bayesian analysis Pavia 2018/pavia-2018-master/pavia-2018-master/stan_programs/simple_poisson_regression.stan")
rstan:::rstudio_stanc("C:/Users/leoeg/Dropbox/Corsi esterni, app, materiale vario/Bayesian analysis Pavia 2018/pavia-2018-master/pavia-2018-master/stan_programs/simple_poisson_regression.stan")
setwd("~/GitHub/GLMM-course-2019---Bayesian-Inference-with-Stan/Lab")
## ---- cache=TRUE, results="hide", message=FALSE--------------------------
comp_model_P <- stan_model('stan_programs/simple_poisson_regression.stan')
## ----fit_P_real_data, cache=TRUE-----------------------------------------
fit_P_real_data <- sampling(comp_model_P, data = stan_dat_simple)
## ----results_simple_P----------------------------------------------------
print(fit_P_real_data, pars = c('alpha','beta'))
mcmc_hist(as.matrix(fit_P_real_data, pars = c('alpha','beta')))
y_rep <- as.matrix(fit_P_real_data, pars = "y_rep")
dim(y_rep)
ppc_dens_overlay(y = stan_dat_simple$complaints, y_rep[1:200,])
prop_zero <- function(x) mean(x == 0)
ppc_stat(y = stan_dat_simple$complaints, yrep = y_rep, stat = "prop_zero")
mean_y_rep <- colMeans(y_rep)
std_resid <- (stan_dat_simple$complaints - mean_y_rep) / sqrt(mean_y_rep)
qplot(mean_y_rep, std_resid) + hline_at(2) + hline_at(-2)
## ---- cache=TRUE, results="hide", message=FALSE--------------------------
comp_model_NB <- stan_model('stan_programs/multiple_NB_regression.stan')
## ----runNB---------------------------------------------------------------
fitted_model_NB <- sampling(comp_model_NB, data = stan_dat_simple)
setwd("~/GitHub/GLMM-course-2019---Bayesian-Inference-with-Stan/Lab")
## ----runNB---------------------------------------------------------------
fitted_model_NB <- sampling(comp_model_NB, data = stan_dat_simple)
