k,
priors,
nMC,
piv.criterion = c("MUS", "maxsumint", "minsumnoint", "maxsumdiff"),
clustering = c("diana", "hclust"),
software =c("rjags", "rstan"),
burn =0.5*nMC){
# Conditions about data dimension----------------
if (is.vector(y)){
N <- length(y)
# Initial values
mu_inits<- c()
clust_inits <- kmeans(y, k)$cluster
for (j in 1:k){
mu_inits[j]<-mean(y[clust_inits==j])
}
if (software=="rjags"){
if (missing(priors)){
priors = list(kind = "independence", parameter = "priorsFish",
hierarchical = "tau")
}
# JAGS code------------------------
# Data
# Model
mod.mist.univ <- BMMmodel(y, k = k, initialValues = list(S0 = 2),
priors = priors)
control <- JAGScontrol(variables = c("mu", "tau", "eta", "S"),
burn.in = burn, n.iter = nMC, seed = 10)
ogg.jags <- JAGSrun(y, model = mod.mist.univ, control = control)
# Parameters' initialization
J <- 3
mcmc.pars <- array(data = NA, dim = c(nMC-length(1:burn), k, J))
mcmc.pars[ , , 1] <- ogg.jags$results[-(1:burn), (N+k+1):(N+2*k)]
mcmc.pars[ , , 2] <- ogg.jags$results[-(1:burn), (N+2*k+1):(N+3*k)]
mcmc.pars[ , , 3] <- ogg.jags$results[-(1:burn), (N+1):(N+k)]
mu_pre_switch_compl <-  mcmc.pars[ , , 1]
tau_pre_switch_compl <-  mcmc.pars[ , , 2]
prob.st_pre_switch_compl <-  mcmc.pars[ , , 3]
mu <- mcmc.pars[,,1]
tau <- mcmc.pars[,,2]
prob.st <- mcmc.pars[,,3]
group <-  ogg.jags$results[-(1:burn), 1:N] #gruppi
FreqGruppiJags <- table(group)
numeffettivogruppi <- apply(group,1,FUN = function(x) length(unique(x)))
if (sum(numeffettivogruppi==k)==0){
return(print("MCMC has not never been able to identify the required number of groups and the process has been interrupted"))
#return(1)
}
##saved in the output
ris_prel <- ogg.jags$results[-(1:burn),]
ris <- ris_prel[numeffettivogruppi==k,]
true.iter <- nrow(ris)
group <- ris[,1:N]
}else if (software=="rstan"){
data = list(N=N, y=y, k=k)
mix_univ <-"
data {
int<lower=1> k;          // number of mixture components
int<lower=1> N;          // number of data points
real y[N];               // observations
}
parameters {
simplex[k] theta;        // mixing proportions
ordered[k] mu;              // locations of mixture components
vector<lower=0>[k] sigma;   // scales of mixture components
}
transformed parameters{
vector[k] log_theta = log(theta);  // cache log calculation
vector[k] pz[N];
simplex[k] exp_pz[N];
for (n in 1:N){
pz[n] =   normal_lpdf(y[n]|mu, sigma)+
log_theta-
log_sum_exp(normal_lpdf(y[n]|mu, sigma)+
log_theta);
exp_pz[n] = exp(pz[n]);
}
}
model {
sigma ~ lognormal(0, 2);
mu ~ normal(0, 10);
for (n in 1:N) {
vector[k] lps = log_theta;
for (j in 1:k){
lps[j] += normal_lpdf(y[n] | mu[j], sigma[j]);
target+=pz[n,j];
}
target += log_sum_exp(lps);
}
}
generated quantities{
int<lower=1, upper=k> z[N];
for (n in 1:N){
z[n] = categorical_rng(exp_pz[n]);
}
}
"
fit_univ <-  stan(model_code = mix_univ,
data=data,
chains =4,
iter =nMC)
sims_univ <- extract(fit_univ)
J <- 3
mcmc.pars <- array(data = NA, dim = c(dim(sims_univ$theta)[1], k, J))
mcmc.pars[ , , 1] <- sims_univ$mu
mcmc.pars[ , , 2] <- sims_univ$sigma
mcmc.pars[ , , 3] <- sims_univ$theta
mu_pre_switch_compl <-  mcmc.pars[ , , 1]
tau_pre_switch_compl <-  mcmc.pars[ , , 2]
prob.st_pre_switch_compl <-  mcmc.pars[ , , 3]
mu <- mcmc.pars[,,1]
tau <- mcmc.pars[,,2]
prob.st <- mcmc.pars[,,3]
group <-  sims_univ$z[, 1:N] #gruppi
FreqGruppiJags <- table(group)
numeffettivogruppi <- apply(group,1,FUN = function(x) length(unique(x)))
if (sum(numeffettivogruppi==k)==0){
return(print("HMC has not never been able to identify the required number of groups and the process has been interrupted"))
#return(1)
}
##saved in the output
ris_prel <- as.matrix(fit_univ)
#[-(1:burn),]
ris <- ris_prel[numeffettivogruppi==k,]
group <- group[numeffettivogruppi==k,]
true.iter <- nrow(ris)
}
## resambling
group.orig <- group
verigruppi <- as.double(names(table(group)))
cont <- 0
for (verogruppo in verigruppi){
cont <- cont+1
group.orig[group==verogruppo] <- cont          #aggiorna contatore pivot
}
cont                                           #qualche dubbio su sta parte
k.orig <- k
if (cont>1){
k <- cont
}
mu <- mu[,verigruppi]
tau <- tau[,verigruppi]
prob.st <- prob.st[,verigruppi]
M <- nrow(group)
group <- group*0
mu_switch <- array(rep(0, true.iter*k), dim=c(true.iter,k))
z <- array(0,dim=c(N, k, true.iter))
for (i in 1:true.iter){
perm <- sample(1:k,k,replace=FALSE)
for (j in 1:k){
#post-processing
group[i,group.orig[i,]==j] <- perm[j]
}
mu_switch[i,] <- mu[i,perm]
tau[i,] <- tau[i,perm]
prob.st[i,] <- prob.st[i,perm]
}
for (i in 1:true.iter){
for (j in 1:N){
z[j,group[i,j],i] <- 1
}
}
}else if (is.matrix(y)){
N <- dim(y)[1]
# Parameters' initialization
clust_inits <- KMeans(y, k)$cluster
#cutree(hclust(dist(y), "average"),k)
mu_inits <- matrix(0,k,2)
for (j in 1:k){
mu_inits[j,] <- cbind(mean(y[clust_inits==j,1]), mean(y[clust_inits==j,2]))
}
#Reorder mu_inits according to the x-coordinate
mu_inits <-
mu_inits[sort(mu_inits[,1], decreasing=FALSE, index.return=TRUE)$ix,]
if (software=="rjags"){
# JAGS code------------------------
# Initial values
if (missing(priors)){
mu0 <- as.vector(c(0,0))
S2 <- matrix(c(1,0,0,1),nrow=2)/100000
S3 <- matrix(c(1,0,0,1),nrow=2)/100000
}else{
mu0 <- priors$mu0
S2 <- priors$S2
S3 <- priors$S3
}
# Data
dati.biv <- list(y = y, N = N, k = k, S2= S2, S3= S3, mu0=mu0,
onesRepNclust = rep(1,k))
# Model
mod.mist.biv<-"model{
# Likelihood:
for (i in 1:N){
yprev[i,1:2]<-y[i,1:2]
y[i,1:2] ~ dmnorm(muOfClust[clust[i],],tauOfClust)
clust[i] ~ dcat(pClust[1:k] )
}
# Prior:
for (g in 1:k) {
muOfClust[g,1:2] ~ dmnorm(mu0[],S2[,])}
tauOfClust[1:2,1:2] ~ dwish(S3[,],3)
Sigma[1:2,1:2] <- inverse(tauOfClust[,])
pClust[1:k] ~ ddirch( onesRepNclust)
}"
init1.biv <- dump.format(list(muOfClust=mu_inits,
tauOfClust= matrix(c(15,0,0,15),ncol=2),
pClust=rep(1/k,k), clust=clust_inits))
moni.biv <- c("clust","muOfClust","tauOfClust","pClust")
mod   <- mod.mist.biv
dati  <- dati.biv
init1 <- init1.biv
moni  <- moni.biv
# Jags execution
ogg.jags <- run.jags(model=mod, data=dati, monitor=moni,
inits=init1, n.chains=3,plots=FALSE, thin=1,
sample=nMC, burnin=1000)
# Extraction
ris <- ogg.jags$mcmc[[1]]
# Post- process of the chains----------------------
group <- ris[,grep("clust[",colnames(ris),fixed=TRUE)]
M <- nrow(group)
H <- list()
mu_pre_switch_compl <- array(rep(0, M*2*k), dim=c(M,2,k))
for (i in 1:k){
H[[i]] <- ris[,grep("muOfClust",colnames(ris),fixed=TRUE)][,c(i,i+k)]
}
for (i in 1:k){
mu_pre_switch_compl[,,i] <- as.matrix(H[[i]])
}
# Discard iterations
numeffettivogruppi <- apply(group,1,FUN = function(x) length(unique(x)))
ris <- ris[numeffettivogruppi==k,]
true.iter <- nrow(ris)
if (sum(numeffettivogruppi==k)==0){
return(print("MCMC has not never been able to identify the required number of groups and the process has been interrupted"))
#return(1)
}else{
L<-list()
mu_pre_switch <- array(rep(0, true.iter*2*k), dim=c(true.iter,2,k))
for (i in 1:k){
L[[i]] <- ris[,grep("muOfClust",colnames(ris),fixed=TRUE)][,c(i,i+k)]
}
for (i in 1:k){
mu_pre_switch[,,i] <- as.matrix(L[[i]])
}
}
group <- ris[,grep("clust[",colnames(ris),fixed=TRUE)]
FreqGruppiJags <- table(group)
tau <- ris[,grep("tauOfClust[",colnames(ris),fixed=TRUE)]
prob.st <- ris[,grep("pClust[",colnames(ris),fixed=TRUE)]
}else if(software=="rstan"){
data =list(N=N, k=k, y=y, D=2)
mix_biv <- "
data {
int<lower=1> k;          // number of mixture components
int<lower=1> N;          // number of data points
int D;                   // data dimension
matrix[N,D] y;           // observations matrix
}
parameters {
simplex[k] theta;        // mixing proportions
vector[D] mu[k];        // locations of mixture components
cholesky_factor_corr[D] L_Omega;   // scales of mixture components
vector<lower=0>[D] L_sigma;
cholesky_factor_corr[D] L_tau_Omega;   // scales of mixture components
vector<lower=0>[D] L_tau;
}
transformed parameters{
vector[k] log_theta = log(theta);  // cache log calculation
vector[k] pz[N];
simplex[k] exp_pz[N];
matrix[D,D] L_Sigma=diag_pre_multiply(L_sigma, L_Omega);
matrix[D,D] L_Tau=diag_pre_multiply(L_tau, L_tau_Omega);
for (n in 1:N){
pz[n]=   multi_normal_cholesky_lpdf(y[n]|mu, L_Sigma)+
log_theta-
log_sum_exp(multi_normal_cholesky_lpdf(y[n]|
mu, L_Sigma)+
log_theta);
exp_pz[n] = exp(pz[n]);
}
}
model{
mu ~ multi_normal_cholesky(rep_vector(0,D), L_Tau);
for (n in 1:N) {
vector[k] lps = log_theta;
for (j in 1:k){
lps[j] += multi_normal_cholesky_lpdf(y[n] |
mu[j], L_Sigma);
target+=pz[n,j];
}
target += log_sum_exp(lps);
}
}
generated quantities{
int<lower=1, upper=k> z[N];
for (n in 1:N){
z[n] = categorical_rng(exp_pz[n]);
}
}
"
fit_biv <-  stan(model_code = mix_biv,
data=data,
chains =4,
iter =nMC)
sims_biv <- extract(fit_biv)
# Extraction
ris <- as.matrix(sims_biv)
# Post- process of the chains----------------------
group <- sims_biv$z
M <- nrow(group)
mu_pre_switch_compl <- array(rep(0, M*2*k), dim=c(M,2,k))
for (i in 1:M)
mu_pre_switch_compl[i,,] <- t(sims_biv$mu[i,,])
# Discard iterations
numeffettivogruppi <- apply(group,1,FUN = function(x) length(unique(x)))
sm <- sims_biv$mu[numeffettivogruppi==k,,]
true.iter <- dim(sm)[1]
if (sum(numeffettivogruppi==k)==0){
return(print("HMC has not never been able to identify the required number of groups and the process has been interrupted"))
#return(1)
}else{
mu_pre_switch <- array(rep(0, true.iter*2*k), dim=c(true.iter,2,k))
for (i in 1:true.iter)
mu_pre_switch[i,,] <- t(sm[i,,])
}
group <- sims_biv$z[numeffettivogruppi==k,]
FreqGruppiJags <- table(group)
#tau <- ris[,grep("tauOfClust[",colnames(ris),fixed=TRUE)]
#prob.st <- ris[,grep("pClust[",colnames(ris),fixed=TRUE)]
}
group.orig <- group
verigruppi <- as.double(names(table(group)))
#prob.st <- prob.st[,verigruppi]
mu_pre_switch <- mu_pre_switch[,,verigruppi]
# Switching Post
cont <- 0
for (l in verigruppi){
cont <- cont+1
group.orig[group==l] <- cont
}
k.orig <- k
if (cont > 1){
k <- cont
}
mu_switch <- array(rep(0, true.iter*2*k), dim=c(true.iter,2,k))
group <- group*0
z <- array(0,dim=c(N, k, true.iter))
for (i in 1:true.iter){
perm <- sample(1:k,k,replace=FALSE)
for (j in 1:k){
#post-processing
group[i,group.orig[i,]==j] <- perm[j]
}
mu_switch[i,,] <- mu_pre_switch[i,,perm]
#tau[i,] <- tau[i,perm]
#prob.st[i,] <- prob.st[i,perm]
}
for (i in 1:true.iter){
for (j in 1:N){
z[j,group[i,j],i] <- 1
}
}
}
FreqGruppiJagsPERM <- table(group)
Freq <- cbind(FreqGruppiJags,FreqGruppiJagsPERM)
colnames(Freq) <- c("JAGS raw groups", "JAGS post-processed groups")
# Similarity matrix based on MCMC sampling------------------------
nz <- dim(z)[1]
M <- dim(z)[3]
C <- matrix(1,nz,nz)
zm <- apply(z,c(1,3),FUN=function(x) sum(x*(1:length(x))))
for (i in 1:(nz-1)){
for (j in (i+1):nz){
C[i,j] <- sum(zm[i,]==zm[j,])/M
C[j,i] <- C[i,j]
}
}
matdissim <- 1-C
diag(matdissim) <- 0
# Clustering on dissimilarity matrix-------------
if (missing(clustering)){
#clustering <- "diana"
gr  <- diana(matdissim,diss=TRUE)
grr <- cutree(gr, k)
}else if(clustering =="diana"){
gr  <- diana(matdissim,diss=TRUE)
grr <- cutree(gr, k)
}else if(clustering == "hclust"){
gr  <- hclust(as.dist(matdissim))
grr <- cutree(gr, k)
}
available_met <- 3
piv.criterion.choices <- c("maxsumint", "minsumnoint",
"maxsumdiff")
if (missing(piv.criterion)){
piv.criterion <- "maxsumdiff"
}
if (piv.criterion=="maxsumint"||
piv.criterion=="minsumnoint"||
piv.criterion=="maxsumdiff" ){
piv.index <- (1:3)[piv.criterion.choices==piv.criterion]
piv.index.pivotal <- c(1,2,3)
available_met <- 3
x <- c(1:available_met)
prec.par.1 <- min(min(table(grr))-1,5)
clust  <-  piv_sel(C=C, clusters=as.vector(grr))
pivots <- clust$pivots[,piv.index.pivotal[piv.index]]
}else if(piv.criterion=="MUS"){
if (k <=4 & sum(C==0)!=0){
prec.par.1 <- min(min(table(grr))-1,5)
mus_res    <- MUS(C, grr, prec.par.1)
clust  <-  mus_res$pivots
}else{
print("maxsumdiff criterion instead of MUS has been adopted due to
computational efficiency")
clust  <-  piv_sel(C=C,  clusters=as.vector(grr))
pivots <- clust$pivots[,3]
}
}
return(list( Freq=Freq,
true.iter = true.iter,
z=z,
Mu = mu_inits,
ris=ris,
groupPost=group,
mu_switch=mu_switch,
mu_raw=mu_pre_switch_compl,
C=C,
grr=grr,
pivots = pivots,
piv.criterion = piv.criterion))
}
N   <- 20
k   <- 4
nMC <- 200
M1  <-c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(49.5,8)
M4  <- c(63.0,.1)
Mu  <- matrix(rbind(M1,M2,M3,M4),c(4,2))
stdev    <- cbind(rep(1,k), rep(200,k))
Sigma.p1 <- matrix(c(stdev[1,1],0,0,stdev[1,1]), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(stdev[1,2],0,0,stdev[1,2]), nrow=2, ncol=2)
W <- c(0.2,0.8)
sim <- piv_sim(N,k,Mu, stdev, Sigma.p1,Sigma.p2,W)
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, software ="rstan")
library(cluster)
N   <- 20
k   <- 4
nMC <- 200
M1  <-c(-.5,8)
M2  <- c(25.5,.1)
M3  <- c(49.5,8)
M4  <- c(63.0,.1)
Mu  <- matrix(rbind(M1,M2,M3,M4),c(4,2))
stdev    <- cbind(rep(1,k), rep(200,k))
Sigma.p1 <- matrix(c(stdev[1,1],0,0,stdev[1,1]), nrow=2, ncol=2)
Sigma.p2 <- matrix(c(stdev[1,2],0,0,stdev[1,2]), nrow=2, ncol=2)
W <- c(0.2,0.8)
sim <- piv_sim(N,k,Mu, stdev, Sigma.p1,Sigma.p2,W)
res <- piv_MCMC(y = sim$y, k =k, nMC = nMC, software ="rstan")
library(faraway)
data(ozone)
#pairs(ozone)
ozone.glm1 <- glm(log(O3) ~., data= ozone, family=gaussian)
summary(ozone.glm1)
ozone.gam1 <- gam(log(O3)~s(vh)+s(wind)+s(humidity)+s(temp)+s(ibh)+ s(dpg)+s(ibt)+s(vis)+s(doy), family=gaussian(link=identity),data=ozone)
summary(ozone.gam1)
par(mfrow=c(3,3))
plot(ozone.gam1)
#Posso mettere vh ,ibt e wind come lineari
ozone.gam1.gamma <- gam(O3~ s(vh)+s(wind)+s(temp)+s(ibh)+ s(dpg)+s(vis)+s(doy)+s(ibt), family=Gamma(link=log),data=ozone)
summary(ozone.gam1.gamma)
AIC(ozone.glm1, ozone.gam1.gamma, ozone.gam1)
library(mgcv)
library(faraway)
data(ozone)
#pairs(ozone)
ozone.glm1 <- glm(log(O3) ~., data= ozone, family=gaussian)
summary(ozone.glm1)
ozone.gam1 <- gam(log(O3)~s(vh)+s(wind)+s(humidity)+s(temp)+s(ibh)+ s(dpg)+s(ibt)+s(vis)+s(doy), family=gaussian(link=identity),data=ozone)
summary(ozone.gam1)
par(mfrow=c(3,3))
plot(ozone.gam1)
#Posso mettere vh ,ibt e wind come lineari
ozone.gam1.gamma <- gam(O3~ s(vh)+s(wind)+s(temp)+s(ibh)+ s(dpg)+s(vis)+s(doy)+s(ibt), family=Gamma(link=log),data=ozone)
summary(ozone.gam1.gamma)
AIC(ozone.glm1, ozone.gam1.gamma, ozone.gam1)
install.packages("faraway")
library(faraway)
data(ozone)
#pairs(ozone)
ozone.glm1 <- glm(log(O3) ~., data= ozone, family=gaussian)
summary(ozone.glm1)
ozone.gam1 <- gam(log(O3)~s(vh)+s(wind)+s(humidity)+s(temp)+s(ibh)+ s(dpg)+s(ibt)+s(vis)+s(doy), family=gaussian(link=identity),data=ozone)
summary(ozone.gam1)
par(mfrow=c(3,3))
plot(ozone.gam1)
#Posso mettere vh ,ibt e wind come lineari
ozone.gam1.gamma <- gam(O3~ s(vh)+s(wind)+s(temp)+s(ibh)+ s(dpg)+s(vis)+s(doy)+s(ibt), family=Gamma(link=log),data=ozone)
summary(ozone.gam1.gamma)
AIC(ozone.glm1, ozone.gam1.gamma, ozone.gam1)
hist(ozone$O3)
hist(log(ozone$O3))
par(mfrow=c(1,1))
par(mfrow=c(1,2))
hist(ozone$O3)
hist(log(ozone$O3))
range(O3)
range(ozone$O3)
hist(log(ozone$O3/(1+ozone$O3)))
